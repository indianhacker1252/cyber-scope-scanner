import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Loader2, Brain, Target, Shield, Zap } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import openaiService from "@/utils/openaiService";

const PentestGPT = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [attackInfo, setAttackInfo] = useState("");
  const [methodologies, setMethodologies] = useState("");
  const [targetInfo, setTargetInfo] = useState("");
  const { toast } = useToast();

  const [formData, setFormData] = useState({
    attackType: "",
    target: "",
    context: "",
    scope: ""
  });

  const attackTypes = [
    "SQL Injection",
    "Cross-Site Scripting (XSS)",
    "Cross-Site Request Forgery (CSRF)",
    "Remote Code Execution (RCE)",
    "Local File Inclusion (LFI)",
    "Remote File Inclusion (RFI)",
    "Server-Side Request Forgery (SSRF)",
    "XML External Entity (XXE)",
    "Insecure Direct Object Reference",
    "Authentication Bypass",
    "Privilege Escalation",
    "Buffer Overflow",
    "Directory Traversal",
    "Command Injection",
    "LDAP Injection",
    "NoSQL Injection",
    "Deserialization Attacks",
    "Business Logic Flaws"
  ];

  const handleGetAttackInfo = async () => {
    if (!openaiService.hasApiKey()) {
      toast({
        title: "API Key Required",
        description: "Please configure your OpenAI API key in Tool Management first.",
        variant: "destructive"
      });
      return;
    }

    if (!formData.attackType) {
      toast({
        title: "Attack Type Required",
        description: "Please select an attack type to get information.",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    try {
      const prompt = `
You are PentestGPT, an expert penetration testing assistant. Provide comprehensive information about the following attack:

Attack Type: ${formData.attackType}
Target Context: ${formData.target || 'General'}
Additional Context: ${formData.context || 'Standard pentest engagement'}
Scope: ${formData.scope || 'Authorized testing only'}

Please provide:
1. ATTACK OVERVIEW
   - Definition and mechanism
   - Common variants and techniques
   - OWASP classification (if applicable)

2. MANUAL TESTING APPROACH
   - Step-by-step manual testing methodology
   - Tools and techniques for manual verification
   - What to look for manually

3. AUTOMATED TESTING APPROACH
   - Recommended automated tools
   - Scanning techniques and parameters
   - Custom scripts or payloads

4. ATTACK VECTORS & PAYLOADS
   - Common entry points
   - Example payloads for testing
   - Advanced evasion techniques

5. DETECTION & EXPLOITATION
   - How to identify vulnerabilities
   - Exploitation methodology
   - Post-exploitation techniques

6. MITIGATION & REMEDIATION
   - Prevention techniques
   - Code fixes and configurations
   - Best practices for developers

7. REAL-WORLD SCENARIOS
   - Common vulnerable applications
   - Case studies and examples
   - Latest trends and techniques (2024)

Format the response clearly with proper sections and actionable information for both manual and automated testing.
`;

      const completion = await openaiService.getClient()?.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 3000,
        temperature: 0.3
      });

      const result = completion?.choices[0]?.message?.content || 'Failed to get attack information';
      setAttackInfo(result);
      
      toast({
        title: "Attack Information Generated",
        description: "Comprehensive attack information has been generated successfully."
      });
    } catch (error) {
      console.error('PentestGPT Error:', error);
      toast({
        title: "Error",
        description: "Failed to generate attack information. Please check your API key.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetMethodologies = async () => {
    if (!openaiService.hasApiKey()) {
      toast({
        title: "API Key Required",
        description: "Please configure your OpenAI API key in Tool Management first.",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    try {
      const prompt = `
You are PentestGPT. Generate a comprehensive penetration testing methodology guide including:

1. RECONNAISSANCE PHASE
   - Passive information gathering
   - Active reconnaissance techniques
   - OSINT methodologies
   - Target profiling

2. SCANNING & ENUMERATION
   - Network scanning approaches
   - Service enumeration
   - Vulnerability scanning
   - Web application discovery

3. VULNERABILITY ASSESSMENT
   - Manual testing techniques
   - Automated scanning integration
   - False positive elimination
   - Risk prioritization

4. EXPLOITATION PHASE
   - Exploit selection criteria
   - Manual exploitation techniques
   - Automated exploitation tools
   - Post-exploitation activities

5. PRIVILEGE ESCALATION
   - Local privilege escalation
   - Lateral movement techniques
   - Persistence mechanisms
   - Evidence collection

6. REPORTING & DOCUMENTATION
   - Finding documentation
   - Risk assessment methodologies
   - Remediation recommendations
   - Executive summary creation

Include specific tools, commands, and best practices for each phase. Focus on both manual and automated approaches.
`;

      const completion = await openaiService.getClient()?.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 3000,
        temperature: 0.3
      });

      const result = completion?.choices[0]?.message?.content || 'Failed to get methodologies';
      setMethodologies(result);
      
      toast({
        title: "Methodologies Generated",
        description: "Comprehensive penetration testing methodologies have been generated."
      });
    } catch (error) {
      console.error('PentestGPT Error:', error);
      toast({
        title: "Error",
        description: "Failed to generate methodologies. Please check your API key.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleAnalyzeTarget = async () => {
    if (!openaiService.hasApiKey()) {
      toast({
        title: "API Key Required",
        description: "Please configure your OpenAI API key in Tool Management first.",
        variant: "destructive"
      });
      return;
    }

    if (!formData.target) {
      toast({
        title: "Target Required",
        description: "Please specify a target for analysis.",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    try {
      const prompt = `
You are PentestGPT. Analyze the following target and provide a comprehensive testing strategy:

Target: ${formData.target}
Context: ${formData.context || 'Standard pentest engagement'}
Scope: ${formData.scope || 'Authorized testing only'}

Provide:
1. TARGET ANALYSIS
   - Technology stack identification
   - Attack surface analysis
   - Potential entry points
   - Risk assessment

2. TESTING STRATEGY
   - Recommended testing phases
   - Tool selection for this target
   - Manual testing priorities
   - Automated scanning approach

3. SPECIFIC ATTACK VECTORS
   - Target-specific vulnerabilities to test
   - Custom payloads for this environment
   - Evasion techniques if needed

4. METHODOLOGY RECOMMENDATIONS
   - Step-by-step testing approach
   - Time allocation for each phase
   - Success criteria

5. COMPLIANCE CONSIDERATIONS
   - Relevant standards (OWASP, NIST, etc.)
   - Reporting requirements
   - Evidence collection needs

Format as an actionable penetration testing plan.
`;

      const completion = await openaiService.getClient()?.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 3000,
        temperature: 0.3
      });

      const result = completion?.choices[0]?.message?.content || 'Failed to analyze target';
      setTargetInfo(result);
      
      toast({
        title: "Target Analysis Complete",
        description: "Comprehensive target analysis and testing strategy generated."
      });
    } catch (error) {
      console.error('PentestGPT Error:', error);
      toast({
        title: "Error",
        description: "Failed to analyze target. Please check your API key.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-primary" />
            PentestGPT - AI-Powered Penetration Testing Assistant
          </CardTitle>
          <CardDescription>
            Get comprehensive information about pentesting attacks, methodologies, and strategies for both manual and automated testing.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="attacks" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="attacks" className="flex items-center gap-2">
                <Zap className="h-4 w-4" />
                Attack Information
              </TabsTrigger>
              <TabsTrigger value="methodologies" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                Methodologies
              </TabsTrigger>
              <TabsTrigger value="target" className="flex items-center gap-2">
                <Target className="h-4 w-4" />
                Target Analysis
              </TabsTrigger>
            </TabsList>

            <TabsContent value="attacks" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="attackType">Attack Type</Label>
                  <Select 
                    value={formData.attackType} 
                    onValueChange={(value) => setFormData({...formData, attackType: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select attack type" />
                    </SelectTrigger>
                    <SelectContent>
                      {attackTypes.map((attack) => (
                        <SelectItem key={attack} value={attack}>
                          {attack}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="target">Target (Optional)</Label>
                  <Input
                    id="target"
                    placeholder="e.g., web application, API, network"
                    value={formData.target}
                    onChange={(e) => setFormData({...formData, target: e.target.value})}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="context">Additional Context (Optional)</Label>
                <Textarea
                  id="context"
                  placeholder="Provide additional context about the target or testing scenario"
                  value={formData.context}
                  onChange={(e) => setFormData({...formData, context: e.target.value})}
                />
              </div>

              <Button 
                onClick={handleGetAttackInfo} 
                disabled={isLoading || !formData.attackType}
                className="w-full"
              >
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Brain className="h-4 w-4 mr-2" />}
                Get Attack Information
              </Button>

              {attackInfo && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Badge variant="secondary">{formData.attackType}</Badge>
                      Attack Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <pre className="whitespace-pre-wrap text-sm bg-muted p-4 rounded-lg overflow-auto max-h-96">
                      {attackInfo}
                    </pre>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            <TabsContent value="methodologies" className="space-y-4">
              <Button 
                onClick={handleGetMethodologies} 
                disabled={isLoading}
                className="w-full"
              >
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Shield className="h-4 w-4 mr-2" />}
                Generate Penetration Testing Methodologies
              </Button>

              {methodologies && (
                <Card>
                  <CardHeader>
                    <CardTitle>Penetration Testing Methodologies</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <pre className="whitespace-pre-wrap text-sm bg-muted p-4 rounded-lg overflow-auto max-h-96">
                      {methodologies}
                    </pre>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            <TabsContent value="target" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="targetAnalysis">Target</Label>
                  <Input
                    id="targetAnalysis"
                    placeholder="e.g., example.com, 192.168.1.0/24, mobile app"
                    value={formData.target}
                    onChange={(e) => setFormData({...formData, target: e.target.value})}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="scope">Scope</Label>
                  <Input
                    id="scope"
                    placeholder="e.g., web application only, full network"
                    value={formData.scope}
                    onChange={(e) => setFormData({...formData, scope: e.target.value})}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="contextTarget">Testing Context</Label>
                <Textarea
                  id="contextTarget"
                  placeholder="Describe the testing scenario, objectives, and any constraints"
                  value={formData.context}
                  onChange={(e) => setFormData({...formData, context: e.target.value})}
                />
              </div>

              <Button 
                onClick={handleAnalyzeTarget} 
                disabled={isLoading || !formData.target}
                className="w-full"
              >
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Target className="h-4 w-4 mr-2" />}
                Analyze Target & Generate Strategy
              </Button>

              {targetInfo && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Badge variant="secondary">{formData.target}</Badge>
                      Target Analysis & Testing Strategy
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <pre className="whitespace-pre-wrap text-sm bg-muted p-4 rounded-lg overflow-auto max-h-96">
                      {targetInfo}
                    </pre>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default PentestGPT;